openapi: 3.0.0
paths:
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/search:
    get:
      summary: Search users by full name or username
      parameters:
        - in: query
          name: query
          schema:
            type: string
          required: true
          description: Search query (full name or username)
      responses:
        '200':
          description: List of users matching the search query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid search query

  /users/{username}:
    get:
      summary: Get a user by username
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username of the user
      responses:
        '200':
          description: User data for the specified username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update a user by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: User deleted successfully

  /communities:
    get:
      summary: Get all communities
      responses:
        '200':
          description: List of all communities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Community'
    post:
      summary: Create a new community
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Community'
      responses:
        '201':
          description: Community created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'

  /communities/search:
    get:
      summary: Search communities by name
      parameters:
        - in: query
          name: query
          schema:
            type: string
          required: true
          description: Search query (community name)
      responses:
        '200':
          description: List of communities matching the search query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Community'
        '400':
          description: Invalid search query

  /communities/{name}:
    get:
      summary: Get a community by name
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of the community
      responses:
        '200':
          description: Community data for the specified name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
        '404':
          description: Community not found

  /communities/{id}:
    get:
      summary: Get a community by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Community data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
        '404':
          description: Community not found
    put:
      summary: Update a community by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Community'
      responses:
        '200':
          description: Community updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
    delete:
      summary: Delete a community by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Community deleted successfully

  /posts:
    get:
      summary: Get all posts
      responses:
        '200':
          description: List of all posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

  /posts/{id}:
    get:
      summary: Get a post by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Post data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
    put:
      summary: Update a post by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    delete:
      summary: Delete a post by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Post deleted successfully

  /comments:
    get:
      summary: Get all comments
      responses:
        '200':
          description: List of all comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      summary: Create a new comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /comments/{id}:
    get:
      summary: Get a comment by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Comment data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found
    put:
      summary: Update a comment by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    delete:
      summary: Delete a comment by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Comment deleted successfully

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        full_name:
          type: string
        username:
          type: string
        bio:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Community:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        visibility:
          type: string
          enum:
            - public
            - private
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Post:
      type: object
      properties:
        id:
          type: integer
        community_id:
          type: integer
          nullable: true
        created_by:
          type: integer
        title:
          type: string
        content:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Comment:
      type: object
      properties:
        id:
          type: integer
        post_id:
          type: integer
        created_by:
          type: integer
        content:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
